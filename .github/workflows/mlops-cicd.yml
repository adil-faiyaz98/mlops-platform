name: MLOps Platform CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mlops-api
  TERRAFORM_VERSION: 1.3.2
  KUBECONFIG_PATH: ~/.kube/config

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy bandit safety pytest pytest-cov
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Format check with black
        run: black --check api/

      - name: Import sorting with isort
        run: isort --check-only --profile black api/

      - name: Lint with flake8
        run: flake8 api/

      - name: Type check with mypy
        run: mypy api/

      - name: Security check with bandit
        run: bandit -r api/ -ll

      - name: Dependency vulnerability check
        run: safety check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          pytest api/tests/unit --cov=api --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    strategy:
      matrix:
        environment: [staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/aws
        run: |
          terraform init \
            -backend-config="bucket=mlops-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=platform/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=mlops-terraform-locks" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: ./infrastructure/terraform/aws
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform/aws
        run: terraform plan -var-file=environments/${{ matrix.environment }}.tfvars -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: ./infrastructure/terraform/aws/tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    strategy:
      matrix:
        environment: [staging]
    steps:
      - name: Override environment from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Overriding environment to ${{ github.event.inputs.environment }}"
          echo "::set-output name=environment::${{ github.event.inputs.environment }}"
        id: env_override

      - name: Set environment
        run: |
          ENVIRONMENT="${{ steps.env_override.outputs.environment || matrix.environment }}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: ./infrastructure/terraform/aws

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/aws
        run: |
          terraform init \
            -backend-config="bucket=mlops-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=platform/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=mlops-terraform-locks" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform/aws
        run: terraform apply -auto-approve tfplan

  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          CLUSTER_NAME="mlops-platform-${ENVIRONMENT}"
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update Kubernetes manifests
        run: |
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          IMAGE_TAG="${{ github.sha }}"
          ECR_REPOSITORY="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"

          # Update kustomization.yaml to use the new image
          cd infrastructure/kubernetes/overlays/$ENVIRONMENT
          kustomize edit set image mlops-api=$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Kubernetes
        run: |
          ENVIRONMENT=${{ env.ENVIRONMENT }}

          # Apply kubernetes resources
          kubectl apply -k infrastructure/kubernetes/overlays/$ENVIRONMENT

          # Check deployment status
          kubectl rollout status deployment/mlops-api -n mlops --timeout=300s
