# .github/workflows/ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches: [main] # Trigger workflow on pushes to main
  pull_request:
    branches: [main] # Trigger workflow on pull requests targeting main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests with pytest
        run: |
          pytest -v tests/ # Replace tests/ with your tests dir

  build:
    needs: test # Build job depends on successful test job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Store in GitHub secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Store in GitHub secrets
          aws-region: us-east-1 # replace
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push the Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: your-ecr-repo-name # Store in github secrets
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    needs: build # Deployment depends on successful build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Store in GitHub secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Store in GitHub secrets
          aws-region: us-east-1 # replace
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.0
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure # Change this depending on directory
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./infrastructure # Change this depending on directory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_sagemaker_role_name: ${{ secrets.SAGEMAKER_ROLE_NAME }}
