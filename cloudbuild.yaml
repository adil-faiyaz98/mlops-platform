# cloudbuild.yaml
steps:
  # 1. Run Unit Tests
  - id: "unit-tests"
    name: "python:3.9-slim-buster"
    entrypoint: "pytest"
    args: ["-v", "tests/"]
    volumes:
      - name: pytest-cache
        path: /app/.pytest_cache
    #Add test that verifies.
    #This is what happens if the job passed or failed.
    #if pass, no error.
    #If not success, print data or output file so it can be tested.

  - id: "data-validation"
    name: "python:3.9-slim-buster"
    entrypoint: "python"
    args: ["src/data_processing/validation.py"]
    volumes:
      - name: pytest-cache
        path: /app/.pytest_cache
  - id: "checkData"
    name: "ubuntu"
    entrypoint: bash
    args:
    - -c
    - |
        if [ -f "/project_root/src/data_processing/validation.py" ]; then
            echo "File exists";
        else
            echo "File does not exist";
        fi

  # 2. Build and Push Docker Image to Artifact Registry
  - id: "build-and-push-docker-image"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "${_ARTIFACT_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}",
        ".",
      ]

  - id: "push-docker-image"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "push",
        "${_ARTIFACT_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}",
      ]
  
  # 3. DataFlow Command
  - id: "dataflow"
    name: "google/cloud-sdk"
    entrypoint: "./pipelines/dataflow-cloudbuild.sh"
    args: ["process-raw-csv.py"]
  
  # 4. Auth
  - id: "auth"
    name: "google/cloud-sdk"
    entrypoint: "gcloud"
    args: ["auth", "activate-service-account", "${_SA_EMAIL}", "--key-file", "${_SA_KEY}"]

  - id: "config"
    name: "google/cloud-sdk"
    entrypoint: "gcloud"
    args: ["config", "set", "project", "${PROJECT_ID}"]
  
  # 5. Vertex AI Setup
  - id: "create-model"
    name: "google/cloud-sdk"
    entrypoint: "gcloud"
    args:
      [
        "ai",
        "models",
        "upload",
        "--region",
        "${_REGION}",
        "--display-name",
        "${_MODEL_NAME}",
        "--container-image-uri",
        "${_ARTIFACT_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}",
      ]
  
  # 6. Deploy API to Cloud Run with proper authentication
  - id: "deploy-cloud-run"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "gcloud"
    args:
      [
        "run",
        "deploy",
        "${_SERVICE_NAME}",
        "--image",
        "${_ARTIFACT_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}",
        "--region",
        "${_REGION}",
        "--platform",
        "managed",
        "--memory",
        "${_SERVICE_MEMORY}",
        "--timeout",
        "${_SERVICE_TIMEOUT}",
        "--no-allow-unauthenticated",
        "--service-account",
        "${_RUNTIME_SERVICE_ACCOUNT}",
        "--set-env-vars",
        "JWT_SECRET=${_JWT_SECRET},ENVIRONMENT=${_ENVIRONMENT}"
      ]

  # 7. Run ML Pipeline
  - id: "run-ml-pipeline"
    name: "python:3.9-slim-buster"
    entrypoint: "python"
    args: [
      "src/pipeline.py",
      "--project-id",
      "${PROJECT_ID}",
      "--region",
      "${_REGION}",
      "--input-data-uri", "${_INPUT_DATA_URI}",
      "--output-dir", "${_OUTPUT_DIR}",
      "--model-name", "${_MODEL_NAME}",
      "--experiment-name", "${_EXPERIMENT_NAME}",
      "--deploy-env", "${_ENVIRONMENT}"
    ]
    env:
      - "GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json"
      # Removed redundant env vars since args are now passed correctly
    timeout: "1800s"

timeout: "${_BUILD_TIMEOUT}"

images:
- "${_ARTIFACT_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}"

options:
  machineType: "${_MACHINE_TYPE}"
  diskSizeGb: ${_DISK_SIZE}

availableSecrets:
  secretManager:
    '_SA_KEY':
      versionName: projects/${PROJECT_NUMBER}/secrets/sakey/versions/latest
    '_SA_EMAIL':
      versionName: projects/${PROJECT_NUMBER}/secrets/saemail/versions/latest
    '_JWT_SECRET':
      versionName: projects/${PROJECT_NUMBER}/secrets/jwtsecret/versions/latest
    '_RUNTIME_SERVICE_ACCOUNT':
      versionName: projects/${PROJECT_NUMBER}/secrets/runtime-sa/versions/latest

substitutions:
  _REGION: "us-central1"
  _ARTIFACT_REGISTRY: "us-central1-docker.pkg.dev"
  _REPOSITORY: "ml-repository"
  _SERVICE_NAME: "ml-service-api"
  _MODEL_NAME: "ml-model"
  _SERVICE_MEMORY: "2048M"
  _SERVICE_TIMEOUT: "3600"
  _MACHINE_TYPE: "E2_HIGHCPU_32"
  _DISK_SIZE: "100"
  _BUILD_TIMEOUT: "3600s"
  _ENVIRONMENT: "production"
  _INPUT_DATA_URI: "gs://your-bucket/path/to/data.csv"  # Replace with your actual data URI
  _OUTPUT_DIR: "gs://your-bucket/path/to/output" #Replace what it is.
  _EXPERIMENT_NAME: "ml-experiment"